
# one hot encode sequence und filter: N steht oft für unbekannt => das wird hier gelöscht
X_train = np.array(
    [one_hot_encode(x, NUCLEOTIDES, 200) for x in tqdm_notebook(raw_dataset['raw_sequence']) if 'N' not in x]
)
# transponiert zu (200, 4)
X_train = np.array([x.T.tolist() for x in X_train])

# 0 wird durch -1 ersetzt
X_train[X_train == 0] = -1

tf = T.Compose([T.ToTensor()])
seq_dataset = SequenceDataset(seqs=X_train, c=x_train_cell_type, transform=tf)
train_dl = DataLoader(seq_dataset, BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True)

# dann wie sonst auch immer 
# IMAGE_SIZE = 200
# BATCH_SIZE = 16
# => sizes sind sonst komplett gleich
=> also wäre die Sequenz x hier: 2, 1, 200, 200

bzw. X_train hat (400, 2)

for step, batch in enumerate(train_dl):
        x, y = batch
        x = x.type(torch.float32).to(device)
        y = y.type(torch.long).to(device)
        batch_size = x.shape[0]

        # Algorithm 1 line 3: sample t uniformally for every example in the batch
        t = torch.randint(0, TIMESTEPS, (batch_size,), device=device).long()  # sampling a t to generate t and t+1
        loss = p_losses(model, x, t, y, loss_type="huber")
           optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        ema.step_ema(ema_model, model)

    if (epoch % EPOCHS_LOSS_SHOW) == 0:
        print(f" Epoch {epoch} Loss:", loss.item())

    # save generated images
    if epoch != 0 and epoch % SAVE_AND_SAMPLE_EVERY == 0:
        model.eval()
        print('saving')
        milestone = step // SAVE_AND_SAMPLE_EVERY
        sample_bs = 2
        # This needs to be fixed to the random
        sampled = torch.from_numpy(np.random.choice(cell_types, sample_bs))
        random_classes = sampled.cuda()

        samples = sample(model, classes=random_classes, image_size=IMAGE_SIZE, batch_size=2, channels=1, cond_weight=1)
        n_print = 0

        for image, class_show in zip(samples[-1], random_classes):
            if n_print < 4:
                plt.rcParams["figure.figsize"] = (20, 1)
                pd_seq = pd.DataFrame(image.reshape(4, 200))
                pd_seq.index = NUCLEOTIDES

# es fehlt threshold ?